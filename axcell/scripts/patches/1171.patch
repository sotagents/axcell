From d715def1f4ddd18336e5e49b54baf0efd9acfb94 Mon Sep 17 00:00:00 2001
From: Deyan Ginev <d.ginev@jacobs-university.de>
Date: Sun, 21 Jul 2019 16:14:17 -0400
Subject: [PATCH] neurips binding and reliably preload main article
 dependencies for bibliography post-processing

---
 MANIFEST                              |  1 +
 lib/LaTeXML/Package/neurips.sty.ltxml | 34 +++++++++++++++++++++++++++
 lib/LaTeXML/Post.pm                   | 22 +++++++++--------
 lib/LaTeXML/Post/MakeBibliography.pm  | 11 +++++----
 4 files changed, 53 insertions(+), 15 deletions(-)
 create mode 100644 lib/LaTeXML/Package/neurips.sty.ltxml

diff --git a/MANIFEST b/MANIFEST
index f944d07aa..69b5bdd51 100644
--- a/MANIFEST
+++ b/MANIFEST
@@ -548,6 +548,7 @@ lib/LaTeXML/Package/multido.sty.ltxml
 lib/LaTeXML/Package/multirow.sty.ltxml
 lib/LaTeXML/Package/nameref.sty.ltxml
 lib/LaTeXML/Package/natbib.sty.ltxml
+lib/LaTeXML/Package/neurips.sty.ltxml
 lib/LaTeXML/Package/newcent.sty.ltxml
 lib/LaTeXML/Package/newfloat.sty.ltxml
 lib/LaTeXML/Package/newlfont.sty.ltxml
diff --git a/lib/LaTeXML/Package/neurips.sty.ltxml b/lib/LaTeXML/Package/neurips.sty.ltxml
new file mode 100644
index 000000000..b642e4dd3
--- /dev/null
+++ b/lib/LaTeXML/Package/neurips.sty.ltxml
@@ -0,0 +1,34 @@
+# -*- mode: Perl -*-
+# /=====================================================================\ #
+# | neurips_2019.sty                                                    | #
+# | Implementation for LaTeXML                                          | #
+# |=====================================================================| #
+# | Part of LaTeXML:                                                    | #
+# |  Public domain software, produced as part of work done by the       | #
+# |  United States Government & not subject to copyright in the US.     | #
+# |---------------------------------------------------------------------| #
+# | Bruce Miller <bruce.miller@nist.gov>                        #_#     | #
+# | http://dlmf.nist.gov/LaTeXML/                              (o o)    | #
+# \=========================================================ooo==U==ooo=/ #
+package LaTeXML::Package::Pool;
+use strict;
+use warnings;
+use LaTeXML::Package;
+
+#======================================================================
+RequirePackage('natbib');
+RequirePackage('geometry');
+RequirePackage('lineno');
+#  /--------------------------------------------------------------------\
+# | Drafted by texscan --stub neurips_2019.sty                           |
+#  \--------------------------------------------------------------------/
+DefMacro('\AND',                                   Tokens());
+DefMacro('\And',                                   Tokens());
+DefMacro('\bottomfraction',                        Tokens());
+DefMacro('\patchAmsMathEnvironmentForLineno',      Tokens());
+DefMacro('\patchBothAmsMathEnvironmentsForLineno', Tokens());
+DefMacroI('\subsubsubsection', undef, '\@startsection{subsubsubsection}{4}{}{}{}{}', locked => 1);
+DefMacro('\textfraction', Tokens());
+DefMacro('\topfraction',  Tokens());
+#======================================================================
+1;
diff --git a/lib/LaTeXML/Post.pm b/lib/LaTeXML/Post.pm
index a1dc74c1c..ec12bf2a8 100644
--- a/lib/LaTeXML/Post.pm
+++ b/lib/LaTeXML/Post.pm
@@ -56,7 +56,7 @@ sub ProcessChain_internal {
     foreach my $doc (@docs) {
       local $LaTeXML::Post::DOCUMENT = $doc;
       if (my @nodes = grep { $_ } $processor->toProcess($doc)) {    # If there are nodes to process
-        my $n = scalar(@nodes);
+        my $n   = scalar(@nodes);
         my $msg = join(' ', $processor->getName || '',
           $doc->siteRelativeDestination || '',
           ($n > 1 ? "$n to process" : 'processing'));
@@ -198,7 +198,7 @@ sub generateResourcePathname {
   my $subdir = $$self{resource_directory} || '';
   my $prefix = $$self{resource_prefix}    || "x";
   my $counter = join('_', "_max", $subdir, $prefix, "counter_");
-  my $n = $doc->cacheLookup($counter) || 0;
+  my $n    = $doc->cacheLookup($counter) || 0;
   my $name = $prefix . ++$n;
   $doc->cacheStore($counter, $n);
   return pathname_make(dir => $subdir, name => $name, type => $type); }
@@ -218,11 +218,12 @@ sub find_documentclass_and_packages {
       $classoptions = $$entry{options} || 'onecolumn';
       $oldstyle     = $$entry{oldstyle}; }
     elsif ($$entry{package}) {
-      push(@packages, [$$entry{package}, $$entry{options} || '']); }
-  }
+      push(@packages, [$$entry{package} . ".sty", $$entry{options} || '']); } }
   if (!$class) {
     Warn('expected', 'class', undef, "No document class found; using article");
     $class = 'article'; }
+  if ($class !~ /\.cls$/) {
+    $class = $class . ".cls"; }
   return ([$class, $classoptions, $oldstyle], @packages); }
 
 #%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@@ -336,7 +337,7 @@ sub processNode {
   # XMath will be removed (LATER!), but mark its ids as reusable.
   $doc->preremoveNodes($xmath);
   if ($$self{parallel}) {
-    my $primary = $self->convertNode($doc, $xmath);
+    my $primary     = $self->convertNode($doc, $xmath);
     my @secondaries = ();
     foreach my $proc (@{ $$self{secondary_processors} }) {
       local $LaTeXML::Post::MATHPROCESSOR = $proc;
@@ -425,7 +426,7 @@ sub convertXMTextContent {
       my $tag = $doc->getQName($node);
       if ($tag eq 'ltx:XMath') {
         my $conversion = $self->convertNode($doc, $node);
-        my $xml = $$conversion{xml};
+        my $xml        = $$conversion{xml};
         # And if no xml ????
         push(@result, $self->outerWrapper($doc, $node, $xml)); }
       else {
@@ -516,7 +517,7 @@ sub associateNode {
       $document->generateNodeID($sourcenode, '', 1); }         # but the ID is reusable
     if (my $sourceid = $sourcenode->getAttribute('fragid')) {    # If source has ID
       my $nodeid = $currentnode->getAttribute('fragid') || $sourceid;
-      my $id = $document->uniquifyID($nodeid, $self->IDSuffix);
+      my $id     = $document->uniquifyID($nodeid, $self->IDSuffix);
       if ($isarray) {
         $$node[1]{'xml:id'} = $id; }
       else {
@@ -775,7 +776,7 @@ sub setDocument_internal {
     my ($tag, $attributes, @children) = @$root;
     my ($prefix, $localname) = $tag =~ /^(.*):(.*)$/;
     my $nsuri = $$self{namespaces}{$prefix};
-    my $node = $$self{document}->createElementNS($nsuri, $localname);
+    my $node  = $$self{document}->createElementNS($nsuri, $localname);
     $$self{document}->setDocumentElement($node);
     map { $$attributes{$_} && $node->setAttribute($_ => $$attributes{$_}) } keys %$attributes
       if $attributes;
@@ -927,7 +928,7 @@ sub idcheck {
   my %missing = ();
   foreach my $node ($self->findnodes("//*[\@xml:id]")) {
     my $id = $node->getAttribute('xml:id');
-    $dups{$id} = 1 if $idcache{$id};
+    $dups{$id}    = 1 if $idcache{$id};
     $idcache{$id} = 1; }
   foreach my $id (keys %{ $$self{idcache} }) {
     $missing{$id} = 1 unless $idcache{$id}; }
@@ -1181,13 +1182,14 @@ sub prependNodes {
 sub cloneNode {
   my ($self, $node, $idsuffix, %options) = @_;
   return $node unless ref $node;
+  return $node if ref $node eq 'ARRAY'; # Should we deep clone if we get an array? Just return for now
   my $copy    = $node->cloneNode(1);
   my $nocache = $options{nocache};
 ####  $idsuffix = '' unless defined $idsuffix;
   # Find all id's defined in the copy and change the id.
   my %idmap = ();
   foreach my $n ($self->findnodes('descendant-or-self::*[@xml:id]', $copy)) {
-    my $id = $n->getAttribute('xml:id');
+    my $id    = $n->getAttribute('xml:id');
     my $newid = $self->uniquifyID($id, $idsuffix);
     $idmap{$id} = $newid;
     $self->recordID($newid => $n) unless $nocache;
diff --git a/lib/LaTeXML/Post/MakeBibliography.pm b/lib/LaTeXML/Post/MakeBibliography.pm
index 37c70b92e..6bf6d96fc 100644
--- a/lib/LaTeXML/Post/MakeBibliography.pm
+++ b/lib/LaTeXML/Post/MakeBibliography.pm
@@ -162,13 +162,14 @@ sub convertBibliography {
   my ($self, $doc, $bib) = @_;
   require LaTeXML;
   require LaTeXML::Common::Config;
-  my @packages =
-    my @preload = ();
-  # Might want/need to preload more (all?) packages, but at least do inputenc!
+  my @preload = ();    # custom macros often used in e.g. howpublished field
+                       # need to preload all packages used by the main article
   foreach my $po ($self->find_documentclass_and_packages($doc)) {
     my ($pkg, $options) = @$po;
-    if ($pkg eq 'inputenc') {
-      push(@preload, "[$options]$pkg"); } }
+    if ($options) {
+      push(@preload, "[$options]$pkg"); }
+    else {
+      push(@preload, "$pkg"); } }
   NoteProgress(" [Converting bibliography $bib ...");
   my $bib_config = LaTeXML::Common::Config->new(
     cache_key      => 'BibTeX',
